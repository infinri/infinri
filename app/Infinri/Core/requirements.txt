================================================================================
INFINRI CORE FRAMEWORK - REQUIREMENTS CHECKLIST
================================================================================
Version: 0.1.0
Created: 2025-10-14
Purpose: Core framework services that all modules depend on
Scope: Foundation layer - provides services, NOT business logic

Philosophy: Magento-inspired architecture with modern PHP dependencies
            Keep patterns, lose bloat, maintain modularity

================================================================================
MODULE ARCHITECTURE ALIGNMENT
================================================================================

Directory Structure (matches Theme module pattern):
  app/Infinri/Core/
    ├─ Api/                    [Service contracts/interfaces]
    ├─ Block/                  [Base block classes]
    ├─ Console/                [CLI commands]
    ├─ Controller/             [Base controller classes]
    ├─ Helper/                 [Helper classes - use sparingly]
    ├─ Model/                  [Core models - Config, Module, etc.]
    ├─ Observer/               [Event observers]
    ├─ Plugin/                 [Interceptors/plugins]
    ├─ Setup/                  [Installation scripts]
    ├─ ViewModel/              [Base ViewModel classes]
    ├─ etc/                    [Configuration files]
    │   ├─ module.xml
    │   ├─ config.xml
    │   ├─ di.xml
    │   └─ events.xml
    ├─ view/                   [View layer (if needed)]
    └─ registration.php

================================================================================
PHASE 1: MODULE REGISTRATION SYSTEM
================================================================================

□ 1.1 ComponentRegistrar
  □ Api/ComponentRegistrarInterface.php
      └─ register(string $type, string $name, string $path): void
      └─ getPaths(string $type): array
  
  □ Model/ComponentRegistrar.php
      └─ Singleton instance
      └─ Storage for registered components (modules, themes, libraries)
      └─ Support types: 'module', 'theme', 'library', 'language'
  
  □ Model/ModuleList.php
      └─ getAll(): array - All registered modules
      └─ getNames(): array - Module names only
      └─ getOne(string $name): ?array - Single module info
      └─ has(string $name): bool - Check if module exists

□ 1.2 Module Discovery
  □ Model/ModuleReader.php
      └─ Read module.xml files
      └─ Parse module name, version, sequence (dependencies)
      └─ Validate module structure
  
  □ Model/ModuleLoader.php
      └─ Load modules from app/Infinri/
      └─ Load modules from app/code/ (future)
      └─ Execute registration.php files
      └─ Build module dependency tree
  
  □ app/etc/registration_globlist.php implementation
      └─ Glob patterns: app/Infinri/*/registration.php
      └─ Auto-discover and execute registration files

□ 1.3 Module Status Management
  □ app/etc/config.php implementation
      └─ Store enabled/disabled module list
      └─ Format: ['modules' => ['Infinri_Core' => 1, ...]]
  
  □ Model/ModuleManager.php
      └─ isEnabled(string $moduleName): bool
      └─ getEnabledModules(): array
      └─ Load sequence (dependency order)

================================================================================
PHASE 2: CONFIGURATION SYSTEM
================================================================================

□ 2.1 Config Loading
  □ Api/ConfigInterface.php
      └─ get(string $path, $default = null): mixed
      └─ getValue(string $path, string $scope = 'default'): mixed
  
  □ Model/Config/Reader.php
      └─ Read config.xml from all modules
      └─ Merge configs by scope (default/area/store)
      └─ XPath-style access: 'section/group/field'
  
  □ Model/Config/Loader.php
      └─ loadModuleConfigs(): array
      └─ mergeConfigs(array $configs): array
      └─ Priority: module sequence order

□ 2.2 Scope Config (ScopeConfig)
  □ Model/Config/ScopeConfig.php
      └─ getValue(string $path, string $scope = 'default', $scopeCode = null)
      └─ isSetFlag(string $path, string $scope = 'default'): bool
      └─ Scopes: 'default', 'websites', 'stores'

□ 2.3 Config Cache
  □ Model/Config/Cache.php
      └─ Cache merged configuration
      └─ Cache key per scope
      └─ Invalidate on module enable/disable
  
  □ Console/Command/ConfigCacheClear.php
      └─ bin/console cache:config:clear

□ 2.4 Environment Config
  □ app/etc/env.php implementation
      └─ Database connection
      └─ Cache configuration
      └─ Session storage
      └─ Encryption key
      └─ Load via vlucas/phpdotenv integration

================================================================================
PHASE 3: DEPENDENCY INJECTION CONTAINER
================================================================================

□ 3.1 DI Container Setup (PHP-DI)
  □ Model/Di/ContainerFactory.php
      └─ Build PHP-DI container
      └─ Load definitions from all module di.xml files
  
  □ Model/Di/XmlReader.php
      └─ Read di.xml from modules
      └─ Parse: preferences, types, virtualTypes, plugins
      └─ Convert XML to PHP-DI definitions

□ 3.2 Preferences (Interface → Implementation)
  □ Parse: <preference for="Interface" type="Class"/>
  □ Register with container
  □ Later modules can override preferences

□ 3.3 Constructor Arguments
  □ Parse: <type name="Class"><arguments><argument name="param" xsi:type="object">OtherClass</argument></arguments></type>
  □ Support types: object, string, number, boolean, array, null
  □ Inject dependencies automatically

□ 3.4 Plugins/Interceptors (AOP)
  □ Model/Di/PluginManager.php
      └─ Register plugins from di.xml
      └─ <type name="Class"><plugin name="pluginName" type="PluginClass" sortOrder="10"/></type>
  
  □ Model/Di/Interceptor.php (abstract)
      └─ beforeMethod($subject, ...args)
      └─ aroundMethod($subject, callable $proceed, ...args)
      └─ afterMethod($subject, $result, ...args)
  
  □ Proxy generation (runtime or pre-compiled)

□ 3.5 Object Manager (abstraction over DI)
  □ Model/ObjectManager.php
      └─ get(string $class): object
      └─ create(string $class, array $args = []): object
      └─ configure(array $configuration): void

================================================================================
PHASE 4: LAYOUT SYSTEM
================================================================================

□ 4.1 Layout XML Loading
  □ Api/LayoutInterface.php
      └─ load(string $handle): void
      └─ generateXml(): string
      └─ generateBlocks(): void
      └─ getBlock(string $name): ?BlockInterface
  
  □ Model/Layout/Loader.php
      └─ Load layout XML files by handle
      └─ Handle format: {route}_{controller}_{action}.xml
      └─ Load default.xml from all modules
      └─ Load area-specific layouts (base/frontend/adminhtml)
  
  □ Model/Layout/FileResolver.php
      └─ Find layout files in module view/{area}/layout/ directories
      └─ Search order: module sequence + area priority
      └─ Module area > Module base > Theme area > Theme base

□ 4.2 Layout XML Merging
  □ Model/Layout/Merger.php
      └─ Merge multiple layout XML files
      └─ Process <update handle="..."/> includes
      └─ Handle priority/sort order
      └─ Validate merged XML structure
  
  □ Model/Layout/Update.php
      └─ Apply layout updates
      └─ Support: <referenceContainer>, <referenceBlock>
      └─ Support: <move>, <remove>

□ 4.3 Layout Processing
  □ Model/Layout/Processor.php
      └─ Parse merged XML into layout structure
      └─ Build container/block tree
      └─ Process <arguments> and pass to blocks
      └─ Handle <action method="..."> directives
  
  □ Model/Layout/Builder.php
      └─ Create block instances via DI
      └─ Set block names, parents, children
      └─ Assign templates to blocks
      └─ Inject ViewModels into blocks

□ 4.4 Layout Rendering
  □ Model/Layout/Renderer.php
      └─ Traverse layout tree depth-first
      └─ Render each block
      └─ Concatenate child HTML
      └─ Return final HTML output
  
  □ Output structure management

□ 4.5 Layout Cache
  □ Model/Layout/Cache.php
      └─ Cache merged layout XML
      └─ Cache processed layout structure
      └─ Cache key: handle + area + theme
      └─ Invalidate on module changes

================================================================================
PHASE 5: BLOCK SYSTEM
================================================================================

□ 5.1 Base Block Classes
  □ Api/BlockInterface.php
      └─ toHtml(): string
      └─ setTemplate(string $template): self
      └─ setNameInLayout(string $name): self
  
  □ Block/AbstractBlock.php (extends BlockInterface)
      └─ Template management (setTemplate, getTemplate)
      └─ Child block management (setChild, getChild, unsetChild)
      └─ Data storage (setData, getData, hasData, unsetData)
      └─ Cache management (getCacheKey, getCacheLifetime)
      └─ HTML escaping (escapeHtml, escapeUrl, escapeJs, escapeHtmlAttr)
      └─ URL generation (getUrl)
      └─ Block rendering pipeline
  
  □ Block/Template.php (extends AbstractBlock)
      └─ PHTML template rendering
      └─ ViewModel integration (setViewModel, getViewModel)
      └─ Template variable assignment ($block in templates)
      └─ getChildHtml(string $name = '', bool $useCache = true): string
  
  □ Block/Text.php (extends AbstractBlock)
      └─ Plain text output (no template)
      └─ setText(string $text): self
  
  □ Block/Container.php (extends AbstractBlock)
      └─ Non-rendering wrapper
      └─ Only renders children
      └─ toHtml() returns concatenated child HTML

□ 5.2 Block Factory
  □ Model/Block/Factory.php
      └─ createBlock(string $class, array $data = []): BlockInterface
      └─ Use DI container to instantiate
      └─ Set layout reference on block

□ 5.3 Block Context
  □ Block/Context.php
      └─ Common dependencies injected into blocks
      └─ Request, URL builder, asset repo, escaper, etc.
      └─ Single constructor injection point

================================================================================
PHASE 6: TEMPLATE ENGINE (PHTML)
================================================================================

□ 6.1 Template Rendering
  □ Model/Template/Engine.php
      └─ render(string $templateFile, array $vars = []): string
      └─ PHP include() with output buffering
      └─ Extract $vars into template scope
      └─ $block variable always available
      └─ Error handling for missing templates
  
  □ Model/Template/Resolver.php
      └─ resolveTemplate(string $module, string $area, string $file): ?string
      └─ Fallback chain:
          1. Module area (app/Infinri/Module/view/area/templates/)
          2. Module base (app/Infinri/Module/view/base/templates/)
          3. Theme area (app/Infinri/Theme/view/area/templates/)
          4. Theme base (app/Infinri/Theme/view/base/templates/)
      └─ Throw exception if not found

□ 6.2 Template Context
  □ Template receives $block object
  □ $block->getViewModel() - Access ViewModel
  □ $block->getChildHtml('name') - Render child
  □ $block->escapeHtml($data) - Escape output
  □ $block->getUrl('route') - Generate URLs
  □ $block->getData('key') - Get block data

□ 6.3 Template Cache
  □ PHP OPcache handles compiled PHP
  □ Block HTML cache (optional, per-block setting)
  □ cache_lifetime and cache_key in blocks

================================================================================
PHASE 7: ASSET MANAGEMENT
================================================================================

□ 7.1 Asset Repository
  □ Model/Asset/Repository.php
      └─ addCss(string $path, string $module, array $attributes = []): void
      └─ addJs(string $path, string $module, array $attributes = []): void
      └─ getCss(string $area): array
      └─ getJs(string $area): array
      └─ Priority/order management
      └─ Async/defer support
  
  □ Registration from layout XML
      <head>
        <css src="Infinri_Module::css/styles.css"/>
        <link src="Infinri_Module::js/app.js" defer="true"/>
      </head>

□ 7.2 Asset Building
  □ Model/Asset/Builder.php
      └─ compileLess(string $source, string $output): bool
      └─ minifyCss(string $source, string $output): bool
      └─ minifyJs(string $source, string $output): bool
      └─ generateSourceMaps(): void
      └─ Execute Node.js scripts (lessc, clean-css, terser)
  
  □ Console/Command/AssetDeploy.php
      └─ bin/console asset:deploy [--area=frontend]

□ 7.3 Asset Publishing
  □ Model/Asset/Publisher.php
      └─ publish(string $module, string $area): void
      └─ Copy assets from module view/{area}/web/ to pub/static/
      └─ Development: create symlinks
      └─ Production: copy files
      └─ Path: pub/static/{Module}/{area}/{file}
  
  □ Model/Asset/UrlGenerator.php
      └─ getUrl(string $fileId): string
      └─ Parse: "Infinri_Module::css/styles.css"
      └─ Return: /static/Infinri/Module/css/styles.css
      └─ Add version parameter for cache busting

□ 7.4 Asset Cache
  □ Model/Asset/Cache.php
      └─ Cache compiled CSS/JS
      └─ Cache key includes file mtime
      └─ Invalidate on source file change
  
  □ Console/Command/AssetCacheClear.php
      └─ bin/console asset:cache:clear

□ 7.5 Asset Collection
  □ Model/Asset/Collector.php
      └─ Collect all LESS/JS from modules
      └─ Respect module sequence/dependencies
      └─ Merge in correct order

================================================================================
PHASE 8: EVENT SYSTEM
================================================================================

□ 8.1 Event Dispatcher Integration (Symfony)
  □ Model/Event/Manager.php (wrapper around Symfony EventDispatcher)
      └─ dispatch(string $eventName, array $data = []): void
      └─ Subscribe observers from events.xml
  
  □ Model/Event/Config/Reader.php
      └─ Read events.xml from all modules
      └─ Parse: <event name="..."><observer name="..." instance="..." method="execute"/></event>
      └─ Register observers with event dispatcher

□ 8.2 Observer Pattern
  □ Api/ObserverInterface.php
      └─ execute(Event $event): void
  
  □ Model/Event/Observer.php (wrapper)
      └─ Implements ObserverInterface
      └─ getName(): string
      └─ Disabled flag support

□ 8.3 Core Events
  □ Emit events at key framework points:
      └─ module_load_before, module_load_after
      └─ config_load_before, config_load_after
      └─ layout_load_before, layout_generate_blocks_after
      └─ block_html_before, block_html_after
      └─ controller_dispatch_before, controller_dispatch_after

================================================================================
PHASE 9: CACHE SYSTEM
================================================================================

□ 9.1 Cache Pool Factory (Symfony Cache)
  □ Model/Cache/Factory.php
      └─ Create cache pools by type
      └─ Support: file, redis, memcached, apcu
      └─ Configuration from app/etc/env.php
  
  □ Model/Cache/Pool.php
      └─ get(string $key, callable $callback, int $ttl = null): mixed
      └─ set(string $key, $value, int $ttl = null): bool
      └─ delete(string $key): bool
      └─ clear(): bool

□ 9.2 Cache Types
  □ Model/Cache/TypeList.php
      └─ Register cache types: config, layout, block_html, etc.
      └─ Enable/disable cache types individually
      └─ Invalidate by cache type
  
  □ Console/Command/CacheClear.php
      └─ bin/console cache:clear [--type=config]
  
  □ Console/Command/CacheStatus.php
      └─ bin/console cache:status

□ 9.3 Tag-based Invalidation
  □ Cache tags for smart invalidation
  □ Example: TAG_MODULE_Infinri_Theme
  □ Invalidate all cache entries with tag

================================================================================
PHASE 10: ROUTING SYSTEM
================================================================================

□ 10.1 Route Configuration
  □ Model/Route/Config/Reader.php
      └─ Read routes.xml from modules (if needed)
      └─ Alternative: Use nikic/fast-route directly
  
  □ Model/Route/Router.php
      └─ Match URL to controller/action
      └─ Build route definitions from modules
      └─ Support: /controller/action/param/value

□ 10.2 URL Builder
  □ Model/Url/Builder.php
      └─ getUrl(string $route, array $params = []): string
      └─ Generate URLs from route names
      └─ Support query parameters
      └─ Support secure/non-secure URLs
  
  □ Helper/Url.php (helper for templates)
      └─ url(string $route, array $params = []): string

□ 10.3 Request/Response
  □ Model/Http/Request.php (wrapper if needed)
  □ Model/Http/Response.php (wrapper if needed)
  □ Or use PSR-7 directly

================================================================================
PHASE 11: CONTROLLER SYSTEM
================================================================================

□ 11.1 Base Controller
  □ Controller/AbstractAction.php
      └─ execute(): ResponseInterface (abstract)
      └─ getRequest(): RequestInterface
      └─ getResponse(): ResponseInterface
      └─ redirect(string $url): ResponseInterface
      └─ Layout management (loadLayout, renderLayout)
  
  □ Controller/Result/Forward.php
      └─ Forward to another controller
  
  □ Controller/Result/Redirect.php
      └─ HTTP redirect response
  
  □ Controller/Result/Json.php
      └─ JSON response

□ 11.2 Controller Dispatch
  □ Model/Controller/Dispatcher.php
      └─ Match route to controller
      └─ Instantiate controller via DI
      └─ Execute controller action
      └─ Handle exceptions

================================================================================
PHASE 12: CONSOLE COMMANDS
================================================================================

□ 12.1 Console Application (Symfony Console)
  □ bin/console entry point
      └─ Bootstrap Core Framework
      └─ Load all modules
      └─ Register commands from modules
      └─ Run Symfony Console Application
  
  □ Model/Console/CommandLoader.php
      └─ Discover commands from modules Console/ directory
      └─ Register with Symfony Console

□ 12.2 Core Commands
  □ Console/Command/ModuleListCommand.php
      └─ bin/console module:list
  
  □ Console/Command/ModuleEnableCommand.php
      └─ bin/console module:enable Infinri_Module
  
  □ Console/Command/ModuleDisableCommand.php
      └─ bin/console module:disable Infinri_Module
  
  □ Console/Command/CacheClearCommand.php
      └─ bin/console cache:clear
  
  □ Console/Command/CacheStatusCommand.php
      └─ bin/console cache:status
  
  □ Console/Command/ConfigShowCommand.php
      └─ bin/console config:show [path]
  
  □ Console/Command/AssetDeployCommand.php
      └─ bin/console asset:deploy

================================================================================
PHASE 13: BOOTSTRAP & INITIALIZATION
================================================================================

□ 13.1 Application Bootstrap
  □ app/bootstrap.php
      └─ Load Composer autoloader
      └─ Load environment config (app/etc/env.php)
      └─ Initialize error handling
      └─ Create DI container
      └─ Load module list
      └─ Initialize Core Framework
  
  □ app/autoload.php
      └─ Require vendor/autoload.php
      └─ Execute app/etc/registration_globlist.php

□ 13.2 Application Object
  □ Model/Application.php
      └─ run(): void - Main entry point
      └─ Bootstrap process
      └─ Route request to controller
      └─ Render layout
      └─ Send response

□ 13.3 Public Entry Point
  □ pub/index.php
      └─ require app/bootstrap.php
      └─ Create Application instance
      └─ Run application
      └─ Handle exceptions

================================================================================
PHASE 14: HELPER SYSTEM
================================================================================

□ 14.1 Core Helpers (use sparingly, prefer services)
  □ Helper/Data.php
      └─ General utility functions
  
  □ Helper/Url.php
      └─ URL generation helpers
  
  □ Helper/Config.php
      └─ Quick config access
  
  □ Helper/Escaper.php
      └─ Output escaping utilities

□ 14.2 Translation Helper
  □ Helper/Translation.php
      └─ __(string $text, ...$args): string
      └─ Integration with gettext or custom i18n

================================================================================
IMPLEMENTATION PRIORITY
================================================================================

PHASE 1: Foundation (CRITICAL - Must work)
  1. Component Registration (ComponentRegistrar, ModuleList)
  2. Module Discovery (ModuleLoader, ModuleReader)
  3. Basic DI Container (ContainerFactory, XmlReader)
  4. Bootstrap (app/bootstrap.php, app/autoload.php)
  5. app/etc/registration_globlist.php

PHASE 2: Configuration (CRITICAL - Needed early)
  6. Config System (Reader, Loader, ScopeConfig)
  7. app/etc/config.php (enabled modules)
  8. app/etc/env.php (environment config)
  9. Config Cache

PHASE 3: View Layer (CRITICAL - Theme needs this)
  10. Layout System (Loader, Merger, Processor, Builder, Renderer)
  11. Block System (AbstractBlock, Template, Container)
  12. Template Engine (Engine, Resolver)
  13. Layout Cache

PHASE 4: Assets (CRITICAL - Theme needs this)
  14. Asset Repository
  15. Asset Builder (LESS compilation)
  16. Asset Publisher
  17. Asset URL Generator

PHASE 5: Infrastructure (HIGH - Needed soon)
  18. Event System (Manager, Observer pattern)
  19. Cache System (Factory, TypeList)
  20. URL Builder

PHASE 6: Request Handling (HIGH)
  21. Routing System
  22. Controller Base Classes
  23. pub/index.php entry point
  24. Application object

PHASE 7: CLI (MEDIUM)
  25. Console Application (bin/console)
  26. Core Commands (module, cache, config, asset)

PHASE 8: Polish (LOW)
  27. Helpers
  28. Advanced DI features (plugins/interceptors)
  29. Advanced cache features
  30. Documentation

================================================================================
EXTERNAL DEPENDENCIES
================================================================================

From Root composer.json:
  ✓ php-di/php-di - DI container
  ✓ symfony/event-dispatcher - Event system
  ✓ symfony/cache - Cache pools
  ✓ symfony/console - CLI commands
  ✓ nikic/fast-route - Routing
  ✓ doctrine/dbal - Database (for future use)
  ✓ monolog/monolog - Logging

From Root package.json:
  ✓ less - LESS compilation
  ✓ clean-css-cli - CSS minification
  ✓ terser - JS minification
  ✓ chokidar-cli - File watching

================================================================================
ARCHITECTURAL PRINCIPLES
================================================================================

1. **Magento Patterns Preserved:**
   - Component registration (registration.php)
   - Module structure (etc/module.xml, etc/di.xml, etc/config.xml)
   - Layout XML system (containers, blocks, handles)
   - Block/ViewModel pattern
   - Plugin/Interceptor pattern
   - Event/Observer pattern
   - Area-based configuration (base, frontend, adminhtml)

2. **Modern Replacements:**
   - PHP-DI instead of Magento's custom DI
   - Symfony EventDispatcher instead of custom events
   - Symfony Cache instead of Zend_Cache
   - Symfony Console instead of custom CLI
   - Fast-route instead of complex routing
   - Node-based LESS compilation instead of PHP

3. **Core Responsibilities:**
   - Provide services, NOT business logic
   - No UI components (leave to Theme/Admin modules)
   - No database models (leave to domain modules)
   - Pure infrastructure and framework services

4. **Separation of Concerns:**
   - Core = Framework services
   - Theme = Base UI/UX
   - Admin = Admin interface
   - Other modules = Business features

================================================================================
SUCCESS CRITERIA
================================================================================

□ Theme module can register and be discovered
□ Theme's layout XML files are loaded and processed
□ Theme's PHTML templates render correctly
□ Theme's LESS compiles to CSS
□ Theme's JavaScript publishes to pub/static
□ Other modules can extend Theme via layout XML
□ All modules can use DI, events, config, cache
□ Console commands work (cache:clear, asset:deploy, etc.)
□ < 100ms overhead for framework initialization
□ Zero business logic in Core (pure infrastructure)

================================================================================
DELIVERABLES
================================================================================

Core Framework Module Files:
  ✓ registration.php
  ✓ etc/module.xml
  ✓ etc/config.xml
  ✓ etc/di.xml
  ✓ etc/events.xml
  ✓ Api/* - Interfaces for all services
  ✓ Model/* - Implementation of all services
  ✓ Block/* - Base block classes
  ✓ Controller/* - Base controller classes
  ✓ Console/Command/* - CLI commands
  ✓ Helper/* - Helper utilities

Root Application Files (Core provides):
  ✓ app/bootstrap.php
  ✓ app/autoload.php
  ✓ app/etc/registration_globlist.php
  ✓ app/etc/NonComposerCompotentRegistration.php
  ✓ pub/index.php
  ✓ bin/console

Configuration Templates:
  ✓ app/etc/config.php.template
  ✓ app/etc/env.php.template

================================================================================
NEXT STEPS
================================================================================

1. Start with Phase 1: Component Registration
   └─ ComponentRegistrar, ModuleList, ModuleReader, ModuleLoader

2. Implement Phase 2: Bootstrap
   └─ app/autoload.php, app/bootstrap.php, registration_globlist.php

3. Test module discovery
   └─ Ensure Infinri_Core and Infinri_Theme can be registered

4. Continue through phases 3-8 in order
   └─ Each phase enables the next

5. Test with Theme module
   └─ Once Core is functional, Theme can be implemented

================================================================================
