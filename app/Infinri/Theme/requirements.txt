================================================================================
INFINRI THEME MODULE - REQUIREMENTS CHECKLIST
================================================================================
Version: 0.1.0
Created: 2025-10-14
Updated: 2025-10-14
Purpose: Base theme for entire Infinri platform (single source of truth)
Scope: THEME ONLY - Framework/Admin/SEO moved to DEPENDENCIES.txt

NOTE: This module CONSUMES Core Framework services (Layout, Block, Asset, etc.)
      It does NOT implement them. See DEPENDENCIES.txt for what Core needs.

================================================================================
PHASE 1: MODULE REGISTRATION
================================================================================

□ 1.1 Module Files
  □ registration.php
      └─ ComponentRegistrar::register('module', 'Infinri_Theme', __DIR__)
  
  □ etc/module.xml
      └─ <module name="Infinri_Theme" setup_version="1.0.0"/>
  
  □ composer.json (optional - for module-level dependencies)

□ 1.2 Module Configuration
  □ etc/config.xml - Theme default settings
  □ etc/di.xml - DI preferences/plugins (if needed)

================================================================================
PHASE 2: LAYOUT XML FILES (Theme Provides)
================================================================================

□ 2.1 Base Area Layouts
  □ view/base/layout/default.xml
      └─ Define root page structure (containers: html, head, body)
      └─ Common blocks (messages, loading)
  
  □ view/base/layout/empty.xml
      └─ Minimal layout (no header/footer chrome)

□ 2.2 Frontend Area Layouts  
  □ view/frontend/layout/default.xml
      └─ Extend base, add frontend chrome (header, footer, nav)
  
  □ view/frontend/layout/1column.xml
      └─ Single column page layout
  
  □ view/frontend/layout/2columns-left.xml
      └─ Two column with left sidebar
  
  □ view/frontend/layout/2columns-right.xml
      └─ Two column with right sidebar
  
  □ view/frontend/layout/3columns.xml (optional)
      └─ Three column layout (both sidebars)

□ 2.3 Route-Specific Layouts (Examples)
  □ view/frontend/layout/home_index_index.xml - Homepage
  □ view/frontend/layout/customer_account.xml - Customer dashboard
  □ view/frontend/layout/catalog_product_view.xml - Product page

Note: Admin layouts moved to Admin module (see DEPENDENCIES.txt)

================================================================================
PHASE 3: VIEWMODEL CLASSES (Theme Provides)
================================================================================

□ 3.1 Common ViewModels
  □ ViewModel/Header.php
      └─ getLogo(), getNavigation(), getSearchUrl()
  
  □ ViewModel/Footer.php
      └─ getLinks(), getCopyright(), getSocialLinks()
  
  □ ViewModel/Breadcrumb.php
      └─ getBreadcrumbs() - array of [label, url]
  
  □ ViewModel/Pagination.php
      └─ getCurrentPage(), getTotalPages(), getPageUrl($page)
  
  □ ViewModel/Messages.php (optional - might be Core)
      └─ getMessages() - Flash messages

□ 3.2 ViewModel Registration
  □ Register in etc/di.xml if needed
  □ Use in layout XML: <argument name="view_model" xsi:type="object">Infinri\Theme\ViewModel\Header</argument>

================================================================================
PHASE 4: TEMPLATE SYSTEM (PHTML)
================================================================================

□ 4.1 Base Templates (Theme Provides)
  □ view/base/templates/layout/base.phtml
      └─ Master HTML structure (<!DOCTYPE>, <html>, <head>, <body>)
  
  □ view/frontend/templates/html/header.phtml
      └─ Site header (logo, nav, search)
  
  □ view/frontend/templates/html/footer.phtml
      └─ Site footer (links, copyright, social)
  
  □ view/frontend/templates/html/breadcrumb.phtml
      └─ Breadcrumb trail
  
  □ view/frontend/templates/html/pagination.phtml
      └─ Pagination controls
  
  □ view/frontend/templates/components/messages.phtml
      └─ Flash messages (success/error/info)
  
  □ view/frontend/templates/components/loading.phtml
      └─ Loading spinner/skeleton

Note: Template engine/fallback logic is in Core Framework (see DEPENDENCIES.txt)
Note: Email templates moved to Email module

================================================================================
PHASE 5: ASSETS (Theme Provides Source Files)
================================================================================

□ 5.1 LESS Source Files
  view/base/web/css/source/
    □ _variables.less - Global variables
        └─ Colors, fonts, spacing, breakpoints, z-index scale
    □ _mixins.less - Reusable mixins
        └─ Responsive, flexbox, typography, buttons
    □ _reset.less - CSS reset/normalize
    □ _typography.less - Font definitions, heading styles
    □ _layout.less - Layout containers and wrappers
    □ _grid.less - 12-column responsive grid
    □ _utilities.less - Utility classes (margin, padding, display)
    □ _components.less - Base component styles
  
  view/base/web/css/styles.less
    └─ MASTER file that imports all base LESS

  view/frontend/web/css/source/
    □ _header.less - Header/navigation styles
    □ _footer.less - Footer styles
    □ _navigation.less - Menu/navigation patterns
    □ _forms.less - Form elements
    □ _buttons.less - Button variants
    □ _cards.less - Card component
    □ _modals.less - Modal dialogs
    □ _tables.less - Table styles
    □ _responsive.less - Media query overrides
  
  view/frontend/web/css/styles.less
    └─ Import base + frontend LESS

□ 5.2 JavaScript Source Files
  view/base/web/js/
    □ app.js - Main application init
    □ utils.js - Utility functions (debounce, throttle, etc.)
    □ events.js - Simple pub/sub event bus
    □ storage.js - LocalStorage wrapper
  
  view/frontend/web/js/
    □ navigation.js - Mobile menu toggle, dropdowns
    □ forms.js - Form validation and submission
    □ modals.js - Modal open/close/overlay
    □ tabs.js - Tab switching
    □ accordion.js - Accordion expand/collapse
    □ lazy-load.js - Image lazy loading

□ 5.3 Asset Registration (in layout XML)
  □ view/base/layout/default.xml
      <head>
        <css src="Infinri_Theme::css/styles.css"/>
        <link src="Infinri_Theme::js/app.js"/>
      </head>

Note: Asset compilation (LESS→CSS, minification) handled by Core Framework
Note: Build pipeline (npm scripts) defined in root package.json
Note: Asset publishing to pub/static handled by Core Framework

================================================================================
PHASE 6: THEME CONFIGURATION (etc/config.xml)
================================================================================

□ 6.1 Default Theme Settings
  <config>
    <default>
      <theme>
        <general>
          <logo>Infinri_Theme::images/logo.svg</logo>
          <favicon>Infinri_Theme::images/favicon.ico</favicon>
          <copyright>© 2025 Infinri. All rights reserved.</copyright>
        </general>
        <layout>
          <default_layout>1column</default_layout>
          <container_width>1200px</container_width>
        </layout>
        <typography>
          <body_font>system-ui, -apple-system, sans-serif</body_font>
          <heading_font>inherit</heading_font>
          <code_font>ui-monospace, monospace</code_font>
        </typography>
        <colors>
          <primary>#0066cc</primary>
          <secondary>#6c757d</secondary>
          <accent>#ff6b6b</accent>
        </colors>
      </theme>
    </default>
  </config>

Note: Admin configuration UI in Admin module (see DEPENDENCIES.txt)

================================================================================
PHASE 7: DESIGN STANDARDS (Built into Theme)
================================================================================

□ 7.1 Responsive Breakpoints (_variables.less)
  @mobile: 576px;
  @tablet: 768px;
  @desktop: 992px;
  @widescreen: 1200px;

□ 7.2 Accessibility (A11Y) Standards
  □ Semantic HTML5 (header, nav, main, footer, article, section)
  □ Proper heading hierarchy (h1→h6)
  □ ARIA labels for interactive elements
  □ Keyboard navigation support (Tab, Escape, Arrow keys)
  □ WCAG AA color contrast (4.5:1 text, 3:1 UI)
  □ Focus indicators (visible outline)
  □ Touch targets minimum 44px

□ 7.3 Performance Targets
  □ < 50KB total CSS (minified + gzipped)
  □ < 30KB total JS (minified + gzipped)
  □ Mobile-first CSS (desktop as enhancement)
  □ Lazy load images by default
  □ Defer non-critical JS

Note: Performance optimization handled by Performance module
Note: Testing handled by project-level test suite

================================================================================
THEME IMPLEMENTATION PRIORITY
================================================================================

PHASE 1: Module Foundation (CRITICAL)
  □ registration.php
  □ etc/module.xml
  □ etc/config.xml (default theme settings)

PHASE 2: Layout XML Files (CRITICAL)
  □ view/base/layout/default.xml
  □ view/frontend/layout/default.xml
  □ view/frontend/layout/1column.xml

PHASE 3: Core ViewModels (HIGH)
  □ ViewModel/Header.php
  □ ViewModel/Footer.php
  □ ViewModel/Breadcrumb.php

PHASE 4: Base Templates (HIGH)
  □ templates/layout/base.phtml
  □ templates/html/header.phtml
  □ templates/html/footer.phtml

PHASE 5: Base LESS (HIGH)
  □ css/source/_variables.less
  □ css/source/_mixins.less
  □ css/source/_reset.less
  □ css/source/_typography.less
  □ css/source/_layout.less
  □ css/source/_grid.less
  □ css/styles.less (master)

PHASE 6: Base JavaScript (MEDIUM)
  □ js/app.js
  □ js/utils.js
  □ js/navigation.js

PHASE 7: Component Styles & Scripts (MEDIUM)
  □ css/source/_buttons.less
  □ css/source/_forms.less
  □ css/source/_modals.less
  □ js/modals.js
  □ js/forms.js

PHASE 8: Additional ViewModels (LOW)
  □ ViewModel/Pagination.php
  □ ViewModel/Messages.php

PHASE 9: Polish (LOW)
  □ Additional layout patterns (2col, 3col)
  □ Advanced components (tabs, accordion)
  □ Utility classes
  □ Documentation

Note: Core Framework must be built BEFORE Theme (see DEPENDENCIES.txt)

================================================================================
EXTERNAL DEPENDENCIES (What Theme Requires)
================================================================================

From Core Framework (MUST exist first):
  □ ComponentRegistrar - Module registration
  □ LayoutLoader/Merger/Processor/Renderer - Layout system
  □ AbstractBlock, Template Block - Block system
  □ TemplateEngine - PHTML rendering
  □ AssetRepository/Builder/Publisher - Asset system
  □ ScopeConfig - Configuration reader
  □ UrlBuilder - URL generation
  □ Event Dispatcher - Events

From Root Dependencies (composer.json):
  ✓ symfony/event-dispatcher - Events
  ✓ symfony/cache - Caching
  ✓ php-di/php-di - DI container

From Root Dependencies (package.json):
  ✓ less - LESS compilation
  ✓ clean-css-cli - CSS minification
  ✓ terser - JS minification

See DEPENDENCIES.txt for full breakdown of what needs to be in Core Framework.

================================================================================
THEME SUCCESS CRITERIA
================================================================================

□ Theme module provides base layouts, templates, and assets
□ Other modules can extend Theme layouts via XML without duplicating CSS/JS
□ Per-page layout customization via layout XML handles
□ Total CSS < 50KB (minified + gzipped)
□ Total JS < 30KB (minified + gzipped)
□ WCAG AA accessibility in all templates
□ Mobile-first responsive design
□ Works without JavaScript (progressive enhancement)
□ Clean inheritance: base → frontend/adminhtml

================================================================================
DELIVERABLES (Theme Module)
================================================================================

Files Theme Module Must Contain:
  ✓ registration.php
  ✓ etc/module.xml
  ✓ etc/config.xml
  ✓ etc/di.xml (if needed)
  ✓ view/base/layout/*.xml
  ✓ view/frontend/layout/*.xml
  ✓ view/base/templates/**/*.phtml
  ✓ view/frontend/templates/**/*.phtml
  ✓ view/base/web/css/source/*.less
  ✓ view/frontend/web/css/source/*.less
  ✓ view/base/web/js/*.js
  ✓ view/frontend/web/js/*.js
  ✓ ViewModel/*.php (Header, Footer, Breadcrumb, etc.)
  ✓ DEPENDENCIES.txt (this file)
  ✓ requirements.txt (checklist)

Assets Generated (by Core Framework):
  ✓ pub/static/Infinri/Theme/css/styles.css
  ✓ pub/static/Infinri/Theme/js/app.js
  ✓ pub/static/Infinri/Theme/images/*

================================================================================
NEXT STEPS
================================================================================

1. Build Core Framework first (see DEPENDENCIES.txt)
   └─ Without Core, Theme cannot function

2. Implement Theme module using this checklist
   └─ Start with Phase 1 (registration) → Phase 9 (polish)

3. Test Theme in isolation
   └─ Create test route/controller that uses Theme layouts

4. Build other modules (Admin, SEO, Content, etc.)
   └─ Each extends Theme via layout XML

5. Iterate and refine
   └─ Add components as needed, maintain < 50KB CSS budget
   
================================================================================
