================================================================================
INFINRI THEME MODULE - EXTERNAL DEPENDENCIES
================================================================================

This document tracks functionality that Theme MODULE requires but should be 
implemented in OTHER modules. As the project progresses, move these to their
proper modules and Theme will consume them via DI.

================================================================================
CORE FRAMEWORK MODULE (Required by Theme)
================================================================================

□ Component Registration System
  □ ComponentRegistrar class - Module discovery and registration
  □ ModuleList - Get enabled modules
  □ registration_globlist.php logic

□ Layout System (Core Engine)
  □ LayoutLoader - Load layout XML files from modules
  □ LayoutMerger - Merge XML from multiple modules by priority
  □ LayoutProcessor - Parse XML and build layout tree
  □ LayoutRenderer - Traverse tree and render HTML
  □ LayoutCache - Cache processed layout structures

□ Block System (Base Classes)
  □ AbstractBlock - Base class (template, children, data, cache)
  □ Template Block - PHTML rendering engine
  □ Text Block - Plain text output
  □ Container Block - Non-rendering wrapper
  □ BlockFactory - Create block instances via DI

□ ViewModel System (Base)
  □ ViewModelInterface - Contract for all ViewModels
  □ ViewModelPool - Registry of available ViewModels

□ Template Engine
  □ TemplateEngine - Render PHTML files with context
  □ TemplateResolver - Find templates using fallback chain:
      Module area → Module base → Theme area → Theme base
  □ EscaperHelper - HTML/URL/JS escaping methods

□ Asset Management System
  □ AssetRepository - Register and retrieve CSS/JS assets
  □ AssetBuilder - Compile LESS to CSS, minify JS
  □ AssetPublisher - Copy/symlink assets to pub/static
  □ AssetCache - Cache compiled outputs
  □ AssetMerger - Merge multiple files (optional)

□ Configuration System
  □ Config reader - Read config.xml from modules
  □ Config merger - Merge configs by scope (global/area/store)
  □ Config cache - Cache merged configuration
  □ ScopeConfig - Get config values by path

□ Event System Integration
  □ Event dispatcher integration (Symfony)
  □ Observer registration from events.xml
  □ Event definitions

□ DI Container Integration  
  □ DI container setup (PHP-DI)
  □ di.xml parser and loader
  □ Service instantiation

□ Cache System Integration
  □ Cache pool factory (Symfony Cache)
  □ Cache type definitions
  □ Cache invalidation

□ Helper System (Minimal)
  □ UrlBuilder - Generate URLs from routes
  □ AssetHelper - Get asset URLs
  □ ConfigHelper - Get config values
  □ TranslationHelper - __() function

================================================================================
ADMIN MODULE (Separate from Theme)
================================================================================

□ Admin-Specific Layouts
  □ view/adminhtml/layout/admin_dashboard.xml
  □ view/adminhtml/layout/admin_grid.xml
  □ view/adminhtml/layout/admin_form.xml

□ Admin Components
  □ Grid component (data tables)
  □ Form builder component
  □ Dashboard widgets
  □ Admin navigation/menu system
  □ Admin toolbar

□ Admin Templates
  □ view/adminhtml/templates/grid/*.phtml
  □ view/adminhtml/templates/form/*.phtml
  □ view/adminhtml/templates/dashboard/*.phtml

□ Admin Assets
  □ Admin-specific CSS
  □ Admin-specific JavaScript
  □ Admin grid/form JS libraries

□ Admin Authentication/Authorization
  □ Admin user system
  □ ACL (Access Control List)
  □ Admin session management

================================================================================
SEO MODULE (Separate)
================================================================================

□ Meta Tags Management
  □ MetaViewModel - title, description, keywords
  □ OpenGraph tags
  □ Twitter Card tags
  □ Canonical URLs

□ Structured Data (Schema.org)
  □ JSON-LD generation
  □ Breadcrumb schema
  □ Article/Product schema

□ XML Sitemaps
  □ Sitemap generation
  □ Sitemap index

□ Robots.txt Management

□ URL Rewriting System

================================================================================
PERFORMANCE MODULE (Separate)
================================================================================

□ Critical CSS Extraction
  □ Detect above-fold CSS
  □ Inline critical CSS in <head>

□ Asset Bundling
  □ Bundle multiple CSS files
  □ Bundle multiple JS files
  □ HTTP/2 push hints

□ Image Optimization
  □ Lazy loading implementation
  □ WebP conversion
  □ Responsive image srcset

□ CDN Integration
  □ CDN URL rewriting
  □ Asset versioning/cache busting

□ Service Worker (PWA)
  □ Offline support
  □ Cache strategies

================================================================================
CUSTOMER MODULE (Separate)
================================================================================

□ Customer Navigation
  □ User menu (login/logout/account)
  □ Customer dashboard

□ Authentication UI
  □ Login form
  □ Register form
  □ Forgot password

================================================================================
CONTENT MODULE (Separate)
================================================================================

□ Content Blocks (CMS)
  □ Static blocks
  □ Dynamic blocks

□ Page Management
  □ CMS pages
  □ Page builder

================================================================================
EMAIL MODULE (Separate)
================================================================================

□ Email Templates
  □ Transactional email layouts
  □ Email template engine (PHTML or plain HTML)

□ Email Rendering
  □ Inline CSS for emails
  □ Plain text alternatives

================================================================================
DEVELOPER TOOLS MODULE (Separate)
================================================================================

□ Console Commands
  □ theme:compile - Compile assets
  □ theme:deploy - Deploy to pub/static  
  □ theme:cache:clear - Clear theme cache
  □ cache:clear - Clear all cache
  □ module:enable/disable
  □ setup:upgrade

□ Development Mode
  □ Error page templates
  □ Debug toolbar
  □ Logging viewer

================================================================================
IMPLEMENTATION STRATEGY
================================================================================

PHASE 1: Core Framework First
  Build all Core Framework components that Theme depends on.
  Theme cannot function without these.

PHASE 2: Theme Module
  Build Theme module using Core Framework services.
  Focus on base layouts, templates, and assets ONLY.

PHASE 3: Other Modules
  Admin, SEO, Performance, etc. can be added incrementally.
  Each extends Theme via layout XML and DI.

PHASE 4: Integration
  Modules consume Theme and add their own layouts/assets.
  Theme remains the single source of truth for base styling.

================================================================================
MODULE DEPENDENCY GRAPH
================================================================================

Core Framework (foundation)
    ↓
Theme Module (extends Core)
    ↓
├─ Admin Module (extends Theme)
├─ SEO Module (extends Theme)
├─ Performance Module (extends Theme)
├─ Customer Module (extends Theme)
├─ Content Module (extends Theme)
└─ Email Module (extends Theme)

Each module adds:
- Its own layout XML (merged with Theme)
- Its own templates (fallback to Theme)
- Its own assets (loaded after Theme)
- Its own ViewModels/Blocks (via DI)

================================================================================
